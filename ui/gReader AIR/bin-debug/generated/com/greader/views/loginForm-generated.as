
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    com.greader.views
 *  Class:      loginForm
 *  Source:     C:\Documents and Settings\zjp\workspace\gReader AIR\src\com\greader\views\loginForm.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2011.03.03 10:49:37 CST
 */

package com.greader.views
{

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Form;
import mx.containers.FormItem;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.mx_internal;
import mx.filters.*;
import mx.states.AddItems;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import mx.validators.StringValidator;
import spark.components.Button;
import spark.components.HGroup;
import spark.components.Label;
import spark.components.TextInput;
import spark.components.TitleWindow;
import spark.layouts.BasicLayout;


[States("State1", "loginFail")]

//  begin class def
public class loginForm
    extends spark.components.TitleWindow
    implements mx.binding.IBindingClient, mx.core.IStateClient2
{

    //  instance variables
    [Inspectable]
/**
 * @private
 **/
    public var _loginForm_HGroup1 : spark.components.HGroup;

    [Inspectable]
/**
 * @private
 **/
    public var _loginForm_Label1 : spark.components.Label;

/**
 * @private
 **/
    public var _loginForm_StringValidator1 : mx.validators.StringValidator;

/**
 * @private
 **/
    public var _loginForm_StringValidator2 : mx.validators.StringValidator;

    [Bindable]
	/**
 * @private
 **/
    public var passWord : spark.components.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var userName : spark.components.TextInput;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function loginForm()
    {
        super();



		var bindings:Array = _loginForm_bindingsSetup();
		var watchers:Array = [];

		var target:Object = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_com_greader_views_loginFormWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					function(propertyName:String):* { return loginForm[propertyName]; },
					bindings,
					watchers);

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.width = 266;
        this.height = 182;
        this.title = "登录系统";
        this.layout = _loginForm_BasicLayout1_c();
        this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_loginForm_Array2_c);
        this.currentState = "State1";
        _loginForm_StringValidator1_i();
        _loginForm_StringValidator2_i();


        // events

		var _loginForm_Label1_factory:DeferredInstanceFromFunction = 
		  new mx.core.DeferredInstanceFromFunction(_loginForm_Label1_i);


		states = [
		  new State ({
		    name: "State1",
		    overrides: [
		    ]
		  })
		  ,
		  new State ({
		    name: "loginFail",
		    overrides: [
		      new AddItems().initializeFromObject({
		        itemsFactory: _loginForm_Label1_factory,
		        destination: null,
		        position: "after",
		        relativeTo: ["_loginForm_HGroup1"]
		      })
		      ,
		      new mx.states.SetProperty().initializeFromObject({
		        name: "height",
		        value: 204
		      })
		    ]
		  })
		];







		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.fontFamily = "微软雅黑";
		};



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 10 - 63

			import com.greader.controller.LoginCommand;
			import com.greader.model.LoginState;
			
			import mx.collections.ItemResponder;
			import mx.controls.*;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			public var isLogin:Boolean=false;
		   
			
			public function set username(uname:String):void
			{
				userName.text=uname;
			}
			
			public function set password(upass:String):void
			{
				passWord.text=upass;
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				var loginVo:LoginState=new LoginState;
				loginVo.userName=userName.text;
				loginVo.passWord=passWord.text;
				var token:AsyncToken=new LoginCommand(loginVo).login();
				var responer:ItemResponder=new ItemResponder(resultHandler,faultHandler);
				token.addResponder(responer);
				
			}
			
	
			private function resultHandler(event:ResultEvent,token:AsyncToken):void
			{
				
				isLogin=event.result as Boolean;
				if(isLogin)
				{
					this.visible=false;	
				}else
				{
					this.currentState="loginFail";
				}				
			}
			
			private function faultHandler(event:FaultEvent,token:AsyncToken):void
			{
				this.currentState="loginFail";
				Alert.show("发生异常"+event.fault.toString());				
			}
		

    //  end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _loginForm_StringValidator1_i() : mx.validators.StringValidator
{
	var temp : mx.validators.StringValidator = new mx.validators.StringValidator();
	temp.required = true;
	temp.property = "text";
	temp.requiredFieldError = "账户为必填项";
	temp.initialized(this, "_loginForm_StringValidator1")
	_loginForm_StringValidator1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_loginForm_StringValidator1", _loginForm_StringValidator1);
	return temp;
}

private function _loginForm_StringValidator2_i() : mx.validators.StringValidator
{
	var temp : mx.validators.StringValidator = new mx.validators.StringValidator();
	temp.required = true;
	temp.property = "text";
	temp.requiredFieldError = "密码为必填项";
	temp.initialized(this, "_loginForm_StringValidator2")
	_loginForm_StringValidator2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_loginForm_StringValidator2", _loginForm_StringValidator2);
	return temp;
}

private function _loginForm_BasicLayout1_c() : spark.layouts.BasicLayout
{
	var temp : spark.layouts.BasicLayout = new spark.layouts.BasicLayout();
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _loginForm_Array2_c() : Array
{
	var temp : Array = [_loginForm_Form1_c(), _loginForm_HGroup1_i()];
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _loginForm_Form1_c() : mx.containers.Form
{
	var temp : mx.containers.Form = new mx.containers.Form();
	temp.x = 27;
	temp.y = 10;
	temp.width = 203;
	temp.height = 85;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.Form
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.FormItem
		        ,
		        stylesFactory: function():void {
		          this.fontFamily = "微软雅黑";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          label: "账户",
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: spark.components.TextInput
		              ,
		              id: "userName"
		            })
		          ]
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.FormItem
		        ,
		        stylesFactory: function():void {
		          this.fontFamily = "微软雅黑";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          label: "密码",
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: spark.components.TextInput
		              ,
		              id: "passWord"
		              ,
		              propertiesFactory: function():Object { return {
		                displayAsPassword: true
		              }}
		            })
		          ]
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _loginForm_HGroup1_i() : spark.components.HGroup
{
	var temp : spark.components.HGroup = new spark.components.HGroup();
	temp.x = 58;
	temp.y = 103;
	temp.width = 150;
	temp.height = 26;
	temp.verticalAlign = "middle";
	temp.mxmlContent = [_loginForm_Button1_c(), _loginForm_Button2_c()];
	temp.setStyle("textAlign", "center");
	temp.id = "_loginForm_HGroup1";
	if (!temp.document) temp.document = this;
	_loginForm_HGroup1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_loginForm_HGroup1", _loginForm_HGroup1);
	return temp;
}

private function _loginForm_Button1_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.label = "登录";
	temp.setStyle("fontFamily", "微软雅黑");
	temp.addEventListener("click", ___loginForm_Button1_click);
	if (!temp.document) temp.document = this;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

/**
 * @private
 **/
public function ___loginForm_Button1_click(event:flash.events.MouseEvent):void
{
	button1_clickHandler(event)
}

private function _loginForm_Button2_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.label = "关闭";
	temp.setStyle("fontFamily", "微软雅黑");
	if (!temp.document) temp.document = this;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _loginForm_Label1_i() : spark.components.Label
{
	var temp : spark.components.Label = new spark.components.Label();
	temp.x = 27;
	temp.y = 142;
	temp.text = "登录失败,请检查账户和密码";
	temp.width = 204;
	temp.height = 23;
	temp.setStyle("verticalAlign", "middle");
	temp.setStyle("textAlign", "center");
	temp.setStyle("fontWeight", "bold");
	temp.setStyle("chromeColor", 15207950);
	temp.setStyle("color", 15995410);
	temp.setStyle("textDecoration", "none");
	temp.setStyle("fontFamily", "微软雅黑");
	temp.id = "_loginForm_Label1";
	if (!temp.document) temp.document = this;
	_loginForm_Label1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_loginForm_Label1", _loginForm_Label1);
	return temp;
}


	//	binding mgmt
    private function _loginForm_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            null,
            null,
            "_loginForm_StringValidator1.source"
            , "userName");

        result[1] = new mx.binding.Binding(this,
            null,
            null,
            "_loginForm_StringValidator2.source"
            , "passWord");


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (loginForm)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
