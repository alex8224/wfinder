
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      Main
 *  Source:     C:\Documents and Settings\zjp\workspace\gReader AIR\src\Main.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2011.04.02 12:15:25 CST
 */

package 
{

import com.greader.event.ExecuteEvent;
import com.greader.views.sqlUI;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.KeyboardEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.styles.*;
import spark.components.Group;
import spark.components.WindowedApplication;
import spark.effects.Fade;
import spark.layouts.BasicLayout;
import spark.primitives.Rect;


[SWF( frameRate='8', height='442', width='551')]
[Frame(extraClass="_Main_FlexInit")]

[Frame(factoryClass="_Main_mx_managers_SystemManager")]


//  begin class def
public class Main
    extends spark.components.WindowedApplication
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var backgroundFill : mx.graphics.SolidColor;

    [Bindable]
	/**
 * @private
 **/
    public var fadeEffect : spark.effects.Fade;

    [Bindable]
	/**
 * @private
 **/
    public var sqlgrid : com.greader.views.sqlUI;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function Main()
    {
        super();



		var bindings:Array = _Main_bindingsSetup();
		var watchers:Array = [];

		var target:Object = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_MainWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					function(propertyName:String):* { return Main[propertyName]; },
					bindings,
					watchers);

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.showStatusBar = false;
        this.height = 442;
        this.width = 551;
        this.alwaysInFront = true;
        this.visible = false;
        this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_Main_Array1_c);
        _Main_Fade1_i();


        // events
        this.addEventListener("creationComplete", ___Main_WindowedApplication1_creationComplete);










		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.backgroundAlpha = 0;
		};


        // ambient styles
        mx_internal::_Main_StylesInit();

                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 24 - 208

			import com.greader.commutil.BuilderDb;
			import com.greader.controller.ConnectToServer;
			import com.greader.controller.TestSqlCommand;
			import com.greader.event.ExecuteEvent;
			import com.greader.views.*;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.*;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import spark.components.Application;
			import spark.components.TextInput;
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			
			
			private var stubForServer:ConnectToServer;
			private var conn:TestSqlCommand=new TestSqlCommand;
			
			[Embed(source="icon/icon_032.png")]
			public var trayIcon:Class;
			
			public static var memConnection:SQLConnection=null;

			private function centerMeOnScreen():void
			{
				this.x=Screen.mainScreen.bounds.x/2;
				this.y=Screen.mainScreen.bounds.y/2;
				var initialBounds:Rectangle = new Rectangle((Screen.mainScreen.bounds.width / 2 - (nativeWindow.width/2)), (Screen.mainScreen.bounds.height / 2 - (nativeWindow.height/2)), nativeWindow.width, nativeWindow.height);
				nativeWindow.bounds=initialBounds;
			}

			private function registerTrayMenu():void
			{
				var trayIcon:Bitmap=new trayIcon;
				
				NativeApplication.nativeApplication.icon.bitmaps=[trayIcon.bitmapData];
				var sysTrayIcon: SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;
				sysTrayIcon.tooltip = "wFinder v0.1-- quick launcher";
				sysTrayIcon.addEventListener(MouseEvent.CLICK, handleSysTrayRestore);
				
				var sysTrayMenu: NativeMenu = new NativeMenu();
				var restoreItem: NativeMenuItem = sysTrayMenu.addItem(new NativeMenuItem("恢复窗口"));
				restoreItem.addEventListener(Event.SELECT, handleSysTrayRestore);
				var exitItem: NativeMenuItem = sysTrayMenu.addItem(new NativeMenuItem("退出wFinder"));
				exitItem.addEventListener(Event.SELECT, handleSysTrayExit);
				sysTrayIcon.menu = sysTrayMenu;
			}
			
			private function handleSysTrayRestore(event:Event): void {
				if (!nativeWindow.visible) {					
					nativeWindow.visible = true;
					nativeWindow.activate();
				}
			}
			
			private function handleSysTrayExit(event:Event):void
			{
				nativeWindow.dispatchEvent(new Event(Event.CLOSING,true,true));
			}
			
			private function initMemoryDb():void
			{
				memConnection=new SQLConnection;
				memConnection.open(null);
				BuilderDb.createSchema(memConnection);
				sqlgrid.sqlCommand.connection=memConnection;
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{			
				centerMeOnScreen();
				nativeWindow.addEventListener(Event.CLOSING,closeHandle);
				nativeApplication.addEventListener(InvokeEvent.INVOKE,invokeHandler);
				this.addEventListener(KeyboardEvent.KEY_UP,AltDown);
			//	NativeApplication.nativeApplication.idleThreshold=30;
			//	nativeApplication.addEventListener(Event.USER_IDLE,idleHandler);
				registerTrayMenu();		
				BuilderDb.checkAndInitDb();
				//initMemoryDb();
				setTimeout(lazyProcess,10000);
				//setTimeout(firstDump,4000);
			} 	
			
			private function AltDown(event:KeyboardEvent):void
			{
				if(event.keyCode==18)
				{
					var top10Win:Top10Show=Top10Show(PopUpManager.createPopUp(this,Top10Show,false));
					top10Win.conn=conn;
					top10Win.addEventListener(ExecuteEvent.EXECUTE,userExecuteEvent);
					top10Win.itemDbHandler=gridDbHandler;
					PopUpManager.centerPopUp(top10Win);					
				}				
			}
			
			protected function invokeHandler(event:InvokeEvent):void
			{
				if(!nativeWindow.visible)
				{
					nativeWindow.activate();
					nativeWindow.visible=true;
				}
			}
			
			protected function idleHandler(event:Event):void
			{
				trace("idle time out");
				if(memConnection!=null && memConnection.connected)
				{
					BuilderDb.dumpToMemoryDb(memConnection);
					trace("dump db completed!");
				}				
			}
			
			protected function lazyProcess():void
			{
				stubForServer=new ConnectToServer;
				sqlgrid.itemDbHandler=gridDbHandler;					
			}
			
			protected function firstDump():void
			{
				if(memConnection!=null && memConnection.connected)
				{
					BuilderDb.dumpToMemoryDb(memConnection);
				}
			}
			
			public function gridDbHandler(employee:Object):void			
			{
				var lnkPath:String=employee.fullpath+"\\"+employee.fname;
				new TestSqlCommand().addExecuteCount(int(employee.fid));
				var cmdText:String="open|"+lnkPath;
				stubForServer.sendCmd(cmdText);
			}
			
			public function closeHandle(evt:Event):void
			{
				evt.preventDefault();	
				sqlgrid.dispose();
				if(stubForServer!=null)
				{
					stubForServer.dispose();
				}
				nativeWindow.close();
				nativeApplication.exit();
			}

			protected function close_clickHandler(event:MouseEvent):void
			{
				nativeWindow.dispatchEvent(new Event(Event.CLOSING,true,true));				
			}
			
			protected function userExecuteEvent(event:ExecuteEvent):void
			{
				if(event.nosearchresult)
				{
					stubForServer.sendCmd("open|"+event.nosearchresult);
				}else if(event.executetype=="location")
				{
					stubForServer.sendCmd("location|"+event.attachItem.fullpath+"\\"+event.attachItem.fname);
				}
				nativeWindow.minimize();
				nativeWindow.visible=false;				
			}


			protected function group1_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.keyCode==27)
				{
					nativeWindow.minimize();
					nativeWindow.visible=false;		
				}
			}



    //  end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _Main_Fade1_i() : spark.effects.Fade
{
	var temp : spark.effects.Fade = new spark.effects.Fade();
	temp.alphaFrom = 0;
	temp.alphaTo = 1;
	temp.repeatCount = 1;
	temp.repeatBehavior = "reverse";
	fadeEffect = temp;
	mx.binding.BindingManager.executeBindings(this, "fadeEffect", fadeEffect);
	return temp;
}

private function _Main_Array1_c() : Array
{
	var temp : Array = [_Main_Group1_c()];
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _Main_Group1_c() : spark.components.Group
{
	var temp : spark.components.Group = new spark.components.Group();
	temp.height = 300;
	temp.x = 18;
	temp.y = 80;
	temp.width = 516;
	temp.layout = _Main_BasicLayout1_c();
	temp.mxmlContent = [_Main_Rect1_c(), _Main_sqlUI1_i()];
	temp.addEventListener("keyDown", ___Main_Group1_keyDown);
	if (!temp.document) temp.document = this;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _Main_BasicLayout1_c() : spark.layouts.BasicLayout
{
	var temp : spark.layouts.BasicLayout = new spark.layouts.BasicLayout();
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _Main_Rect1_c() : spark.primitives.Rect
{
	var temp : spark.primitives.Rect = new spark.primitives.Rect();
	temp.radiusX = 5;
	temp.radiusY = 5;
	temp.left = 0;
	temp.right = 0;
	temp.top = 0;
	temp.bottom = 0;
	temp.fill = _Main_SolidColor1_i();
	temp.initialized(this, null)
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _Main_SolidColor1_i() : mx.graphics.SolidColor
{
	var temp : mx.graphics.SolidColor = new mx.graphics.SolidColor();
	temp.alpha = 0;
	backgroundFill = temp;
	mx.binding.BindingManager.executeBindings(this, "backgroundFill", backgroundFill);
	return temp;
}

private function _Main_sqlUI1_i() : com.greader.views.sqlUI
{
	var temp : com.greader.views.sqlUI = new com.greader.views.sqlUI();
	temp.x = 17;
	temp.y = 52;
	temp.width = 468;
	temp.height = 295;
	temp.addEventListener("execute", __sqlgrid_execute);
	temp.id = "sqlgrid";
	if (!temp.document) temp.document = this;
	sqlgrid = temp;
	mx.binding.BindingManager.executeBindings(this, "sqlgrid", sqlgrid);
	return temp;
}

/**
 * @private
 **/
public function __sqlgrid_execute(event:com.greader.event.ExecuteEvent):void
{
	userExecuteEvent(event)
}

/**
 * @private
 **/
public function ___Main_Group1_keyDown(event:flash.events.KeyboardEvent):void
{
	group1_keyDownHandler(event)
}

/**
 * @private
 **/
public function ___Main_WindowedApplication1_creationComplete(event:mx.events.FlexEvent):void
{
	windowedapplication1_creationCompleteHandler(event)
}


	//	binding mgmt
    private function _Main_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            null,
            function(_sourceFunctionReturnValue:*):void
            {
                this.setStyle("creationCompleteEffect", _sourceFunctionReturnValue);
            },
            "this.creationCompleteEffect"
            , "fadeEffect");

        result[1] = new mx.binding.Binding(this,
            function():Object
            {

                return (this);
            },
            null,
            "fadeEffect.target"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (Main)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//	initialize style defs for Main

	mx_internal var _Main_StylesInit_done:Boolean = false;

	mx_internal function _Main_StylesInit():void
	{
		//	only add our style defs to the style manager once
		if (mx_internal::_Main_StylesInit_done)
			return;
		else
			mx_internal::_Main_StylesInit_done = true;
			
		var style:CSSStyleDeclaration;
		var effects:Array;
			        

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

		styleManager.initProtoChainRoots();
	}


    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
