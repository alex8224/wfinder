
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    com.greader.views
 *  Class:      sqlUI
 *  Source:     C:\Documents and Settings\zjp\workspace\gReader AIR\src\com\greader\views\sqlUI.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2011.04.02 12:15:25 CST
 */

package com.greader.views
{

import com.greader.event.SearchEvent;
import com.greader.views.render.listitemrender;
import com.greader.views.searchGroup;
import com.greader.views.skin.listskin;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.KeyboardEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.IList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.filters.*;
import mx.styles.*;
import spark.components.Group;
import spark.components.List;
import spark.components.VGroup;
import spark.events.IndexChangeEvent;
import spark.layouts.BasicLayout;
import spark.layouts.VerticalLayout;



		[Event(name="execute", type="com.greader.event.ExecuteEvent")]
	

//  begin class def
public class sqlUI
    extends spark.components.Group
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var container : spark.components.VGroup;

    [Bindable]
	/**
 * @private
 **/
    public var empname : com.greader.views.searchGroup;

    [Bindable]
	/**
 * @private
 **/
    public var rlist : spark.components.List;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function sqlUI()
    {
        super();



		var bindings:Array = _sqlUI_bindingsSetup();
		var watchers:Array = [];

		var target:Object = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_com_greader_views_sqlUIWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					function(propertyName:String):* { return sqlUI[propertyName]; },
					bindings,
					watchers);

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.width = 465;
        this.height = 340;
        this.layout = _sqlUI_BasicLayout1_c();
        this.mxmlContent = [_sqlUI_VGroup1_i()];


        // events
        this.addEventListener("creationComplete", ___sqlUI_Group1_creationComplete);










		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 17 - 170

			import com.greader.controller.*;
			import com.greader.event.ExecuteEvent;
			import com.greader.event.FocusTextEvent;
			import com.greader.event.SearchEvent;
			import com.greader.model.GridPager;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var resultSet:ArrayCollection=new ArrayCollection;
			private var pageResultSet:Array=null;
			protected static var pager:GridPager=null;
			public var sqlCommand:TestSqlCommand=new TestSqlCommand;
			public var itemHandler:Function;
			public var itemDbHandler:Function;
			
			
			public function dispose():void
			{
				sqlCommand.closeConnection();
			}
			
			protected function keyEnter(event:KeyboardEvent):void
			{
				
				if(event.keyCode==13)
				{
					if(rlist.selectedItem.type=="normal")
					{
						itemDbHandler(rlist.selectedItem);
						dispatchEvent(new ExecuteEvent());	
					}					
				}else if(event.keyCode==71)
				{
					dispatchEvent(new ExecuteEvent(null,"location",rlist.selectedItem));
				}
			} 

			protected function empname_searchHandler(event:SearchEvent):void
			{					
				resultSet.removeAll();
				pageResultSet=null;
				var resultArray:Array=sqlCommand.queryEmpByName(event.searchtext);
				if(resultArray!=null)
				{
					if(resultArray.length<=5)
					{//不够一页
						for(var i:int=0;i<resultArray.length;i++)
						{
							resultArray[i].type="normal";
							resultSet.addItem(resultArray[i]);
						}
					}else
					{//多于一页数据
						pageResultSet=resultArray;
						pager=new GridPager;
						pager.pagesize=5;
						rlist.dispatchEvent(new KeyboardEvent(KeyboardEvent.KEY_UP,true,false,0,39));
						pager.totalcount=resultArray.length;
					}
				}
			}
 
			protected function rlist_changeHandler(event:IndexChangeEvent):void
			{				
				if(itemHandler!=null)
				{
					itemHandler(rlist.selectedItem);
				}
			}

			protected function empname_downNavigateHandler(event:KeyboardEvent):void
			{
				
				if(event.keyCode==40 && resultSet.length>0)
				{
					rlist.setFocus();	
				}else if(event.keyCode==13 && resultSet.length>0)
				{
					itemDbHandler(resultSet.getItemAt(0));
					dispatchEvent(new ExecuteEvent());
				}else if(event.keyCode==13 && resultSet.length==0)
				{
					//执行其他命令
					dispatchEvent(new ExecuteEvent(empname.searchtext));
				}
			}

			protected function rlist_keyUpHandler(event:KeyboardEvent):void
			{					
				if(event.keyCode==38 && rlist.selectedIndex==0)
				{
					empname.dispatchEvent(new FocusTextEvent());
				}else if(pageResultSet!=null && (event.keyCode==37 ||event.keyCode==39))
				{
			
					var pageData:Array=null;
					if(event.keyCode==39)		
					{
						
						var pageIndexArray:Array=null;
						if(!pager.showFirstPage)
						{
							pageIndexArray=pager.refreshPage();
						}
						else
							pageIndexArray=pager.nextPage();
			
						
						if(pageIndexArray.length>0)					
						{
							pageData=pageResultSet.slice(pageIndexArray[0],pageIndexArray[1]);
						}

					}
					else if(event.keyCode==37)
					{	
						var pageIndexArray:Array=pager.prevPage();
						if(pageIndexArray.length>0)
						{
							pageData=pageResultSet.slice(pageIndexArray[0],pageIndexArray[1]);
						}			
					}
					
					if(pageData!=null && pageData.length>0)
						resultSet.removeAll();
					
					for(var o:Object in pageData)
					{						
						pageData[o].type="normal";
						resultSet.addItem(pageData[o]);
					}
					if(pageData!=null && pageData.length>0)
					{
						var pageIndictor:Object=new Object;
						pageIndictor.type="pageIndictor";
						resultSet.addItem(pageIndictor)
					}					
					pageData=null;
				}
			}


			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				empname.setFocus();	
			}
		

    //  end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _sqlUI_BasicLayout1_c() : spark.layouts.BasicLayout
{
	var temp : spark.layouts.BasicLayout = new spark.layouts.BasicLayout();
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _sqlUI_VGroup1_i() : spark.components.VGroup
{
	var temp : spark.components.VGroup = new spark.components.VGroup();
	temp.width = 462;
	temp.percentHeight = 100.0;
	temp.horizontalAlign = "center";
	temp.mxmlContent = [_sqlUI_searchGroup1_i(), _sqlUI_List1_i()];
	temp.id = "container";
	if (!temp.document) temp.document = this;
	container = temp;
	mx.binding.BindingManager.executeBindings(this, "container", container);
	return temp;
}

private function _sqlUI_searchGroup1_i() : com.greader.views.searchGroup
{
	var temp : com.greader.views.searchGroup = new com.greader.views.searchGroup();
	temp.width = 447;
	temp.x = 42;
	temp.height = 59;
	temp.addEventListener("search", __empname_search);
	temp.addEventListener("keyDown", __empname_keyDown);
	temp.id = "empname";
	if (!temp.document) temp.document = this;
	empname = temp;
	mx.binding.BindingManager.executeBindings(this, "empname", empname);
	return temp;
}

/**
 * @private
 **/
public function __empname_search(event:com.greader.event.SearchEvent):void
{
	empname_searchHandler(event)
}

/**
 * @private
 **/
public function __empname_keyDown(event:flash.events.KeyboardEvent):void
{
	empname_downNavigateHandler(event)
}

private function _sqlUI_List1_i() : spark.components.List
{
	var temp : spark.components.List = new spark.components.List();
	temp.width = 438;
	temp.height = 267;
	temp.itemRenderer = _sqlUI_ClassFactory1_c();
	temp.useVirtualLayout = true;
	temp.selectedIndex = 0;
	temp.x = 47;
	temp.layout = _sqlUI_VerticalLayout1_c();
	temp.setStyle("borderVisible", false);
	temp.setStyle("skinClass", com.greader.views.skin.listskin);
	temp.setStyle("focusAlpha", 0);
	temp.addEventListener("change", __rlist_change);
	temp.addEventListener("keyDown", __rlist_keyDown);
	temp.addEventListener("keyUp", __rlist_keyUp);
	temp.id = "rlist";
	if (!temp.document) temp.document = this;
	rlist = temp;
	mx.binding.BindingManager.executeBindings(this, "rlist", rlist);
	return temp;
}

private function _sqlUI_ClassFactory1_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = com.greader.views.render.listitemrender;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _sqlUI_VerticalLayout1_c() : spark.layouts.VerticalLayout
{
	var temp : spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
	temp.gap = 2;
	temp.horizontalAlign = "center";
	temp.clipAndEnableScrolling = true;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

/**
 * @private
 **/
public function __rlist_change(event:spark.events.IndexChangeEvent):void
{
	rlist_changeHandler(event)
}

/**
 * @private
 **/
public function __rlist_keyDown(event:flash.events.KeyboardEvent):void
{
	keyEnter(event)
}

/**
 * @private
 **/
public function __rlist_keyUp(event:flash.events.KeyboardEvent):void
{
	rlist_keyUpHandler(event)
}

/**
 * @private
 **/
public function ___sqlUI_Group1_creationComplete(event:mx.events.FlexEvent):void
{
	group1_creationCompleteHandler(event)
}


	//	binding mgmt
    private function _sqlUI_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            null,
            null,
            "rlist.dataProvider"
            , "resultSet");


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (sqlUI)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
