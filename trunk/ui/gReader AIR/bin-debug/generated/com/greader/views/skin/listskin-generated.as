
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    com.greader.views.skin
 *  Class:      listskin
 *  Source:     C:\Documents and Settings\zjp\workspace\gReader AIR\src\com\greader\views\skin\listskin.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2011.04.02 12:15:25 CST
 */

package com.greader.views.skin
{

import com.greader.views.skin.listskinInnerClass0;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.IStateClient2;
import mx.core.mx_internal;
import mx.filters.*;
import mx.graphics.SolidColor;
import mx.graphics.SolidColorStroke;
import mx.states.SetProperty;
import mx.states.State;
import mx.styles.*;
import spark.components.DataGroup;
import spark.components.Scroller;
import spark.layouts.VerticalLayout;
import spark.primitives.Rect;
import spark.skins.SparkSkin;
import spark.skins.spark.DefaultItemRenderer;


 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.List")]
    
[States("normal", "disabled")]

//  begin class def
public class listskin
    extends spark.skins.SparkSkin
    implements mx.core.IStateClient2
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var background : spark.primitives.Rect;

    [Bindable]
	/**
 * @private
 **/
    public var bgFill : mx.graphics.SolidColor;

    [Bindable]
	/**
 * @private
 **/
    public var border : spark.primitives.Rect;

    [Bindable]
	/**
 * @private
 **/
    public var borderStroke : mx.graphics.SolidColorStroke;

    [Bindable]
	/**
 * @private
 **/
    public var dataGroup : spark.components.DataGroup;

    [Bindable]
	/**
 * @private
 **/
    public var dropIndicator : mx.core.ClassFactory;

    [Bindable]
	/**
 * @private
 **/
    public var scroller : spark.components.Scroller;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function listskin()
    {
        super();





        // layer initializers

       
        // properties
        this.minWidth = 112;
        this.blendMode = "normal";
        this.mxmlContent = [_listskin_Rect1_i(), _listskin_Rect2_i(), _listskin_Scroller1_i()];
        this.currentState = "normal";
        _listskin_ClassFactory1_i();


        // events



		states = [
		  new State ({
		    name: "normal",
		    overrides: [
		    ]
		  })
		  ,
		  new State ({
		    name: "disabled",
		    overrides: [
		      new mx.states.SetProperty().initializeFromObject({
		        name: "alpha",
		        value: 0.5
		      })
		    ]
		  })
		];









    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 36 - 86

        /* Define the skin elements that should not be colorized. 
           For list, the skin itself is colorized but the individual parts are not. */
        static private const exclusions:Array = ["scroller", "background"];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
        static private const contentFill:Array = ["bgFill"];
        
        /**
         * @private
         */
        override public function get contentItems():Array {return contentFill};
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
 
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
        {
            if (getStyle("borderVisible") == true)
            {
                border.visible = true;
                background.left = background.top = background.right = background.bottom = 1;
                scroller.minViewportInset = 1;
            }
            else
            {
                border.visible = false;
                background.left = background.top = background.right = background.bottom = 0;
                scroller.minViewportInset = 0;
            }
            
            borderStroke.color = getStyle("borderColor");
            borderStroke.alpha = getStyle("borderAlpha");
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
    

    //  end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _listskin_ClassFactory1_i() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = com.greader.views.skin.listskinInnerClass0;
	temp.properties = {outerDocument: this};
	dropIndicator = temp;
	mx.binding.BindingManager.executeBindings(this, "dropIndicator", dropIndicator);
	return temp;
}

private function _listskin_Rect1_i() : spark.primitives.Rect
{
	var temp : spark.primitives.Rect = new spark.primitives.Rect();
	temp.left = 0;
	temp.right = 0;
	temp.top = 0;
	temp.bottom = 0;
	temp.stroke = _listskin_SolidColorStroke1_i();
	temp.initialized(this, "border")
	border = temp;
	mx.binding.BindingManager.executeBindings(this, "border", border);
	return temp;
}

private function _listskin_SolidColorStroke1_i() : mx.graphics.SolidColorStroke
{
	var temp : mx.graphics.SolidColorStroke = new mx.graphics.SolidColorStroke();
	temp.weight = 1;
	borderStroke = temp;
	mx.binding.BindingManager.executeBindings(this, "borderStroke", borderStroke);
	return temp;
}

private function _listskin_Rect2_i() : spark.primitives.Rect
{
	var temp : spark.primitives.Rect = new spark.primitives.Rect();
	temp.left = 1;
	temp.right = 1;
	temp.top = 1;
	temp.bottom = 1;
	temp.alpha = 0;
	temp.fill = _listskin_SolidColor1_i();
	temp.initialized(this, "background")
	background = temp;
	mx.binding.BindingManager.executeBindings(this, "background", background);
	return temp;
}

private function _listskin_SolidColor1_i() : mx.graphics.SolidColor
{
	var temp : mx.graphics.SolidColor = new mx.graphics.SolidColor();
	temp.color = 16777215;
	temp.alpha = 0;
	bgFill = temp;
	mx.binding.BindingManager.executeBindings(this, "bgFill", bgFill);
	return temp;
}

private function _listskin_Scroller1_i() : spark.components.Scroller
{
	var temp : spark.components.Scroller = new spark.components.Scroller();
	temp.left = 0;
	temp.top = 0;
	temp.right = 0;
	temp.bottom = 0;
	temp.minViewportInset = 1;
	temp.hasFocusableChildren = false;
	temp.viewport = _listskin_DataGroup1_i();
	temp.setStyle("horizontalScrollPolicy", "off");
	temp.id = "scroller";
	if (!temp.document) temp.document = this;
	scroller = temp;
	mx.binding.BindingManager.executeBindings(this, "scroller", scroller);
	return temp;
}

private function _listskin_DataGroup1_i() : spark.components.DataGroup
{
	var temp : spark.components.DataGroup = new spark.components.DataGroup();
	temp.itemRenderer = _listskin_ClassFactory2_c();
	temp.layout = _listskin_VerticalLayout1_c();
	temp.id = "dataGroup";
	if (!temp.document) temp.document = this;
	dataGroup = temp;
	mx.binding.BindingManager.executeBindings(this, "dataGroup", dataGroup);
	return temp;
}

private function _listskin_ClassFactory2_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = spark.skins.spark.DefaultItemRenderer;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}

private function _listskin_VerticalLayout1_c() : spark.layouts.VerticalLayout
{
	var temp : spark.layouts.VerticalLayout = new spark.layouts.VerticalLayout();
	temp.gap = 0;
	temp.horizontalAlign = "contentJustify";
	temp.requestedMinRowCount = 5;
	mx.binding.BindingManager.executeBindings(this, "temp", temp);
	return temp;
}





    //  embed carrier vars
    //  end embed carrier vars


//  end class def
}

//  end package def
}
